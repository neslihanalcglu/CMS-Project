// <auto-generated />
using System;
using Cms.DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Cms.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210811121852_updatedb")]
    partial class updatedb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Cms.Entities.DataContext.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("pagecontentId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("pagecontentId")
                        .IsUnique();

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.ContactForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FormContent")
                        .HasColumnType("text");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("boolean");

                    b.Property<string>("NameSurname")
                        .HasColumnType("text");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("contactforms");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.ContentContainer", b =>
                {
                    b.Property<int>("contentid")
                        .HasColumnType("integer");

                    b.Property<int>("containerid")
                        .HasColumnType("integer");

                    b.Property<int?>("pageContainerid")
                        .HasColumnType("integer");

                    b.Property<int?>("pageContentid")
                        .HasColumnType("integer");

                    b.HasKey("contentid", "containerid");

                    b.HasIndex("pageContainerid");

                    b.HasIndex("pageContentid");

                    b.ToTable("contentcontainers");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguageTag")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("languages");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.PageContainer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("language")
                        .HasColumnType("text");

                    b.Property<DateTime>("modifieddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("texteditor")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("pagecontainers");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.PageContent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("modifieddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("pagedescription")
                        .HasColumnType("text");

                    b.Property<string>("pagedetails")
                        .HasColumnType("text");

                    b.Property<string>("pagetitle")
                        .HasColumnType("text");

                    b.Property<int>("titleid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("pagecontents");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.PageTitle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("currentslanguage")
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("link")
                        .HasColumnType("text");

                    b.Property<string>("menudescription")
                        .HasColumnType("text");

                    b.Property<string>("menutitle")
                        .HasColumnType("text");

                    b.Property<int>("rootid")
                        .HasColumnType("integer");

                    b.Property<int>("rownumber")
                        .HasColumnType("integer");

                    b.Property<string>("targetselection")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("pagetitles");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.PanelUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("RePassword")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("panelusers");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("text");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<string>("Gsm")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location_Lat")
                        .HasColumnType("text");

                    b.Property<string>("Location_Lng")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PageDescription")
                        .HasColumnType("text");

                    b.Property<string>("PageTitle")
                        .HasColumnType("text");

                    b.Property<string>("SMTPServerAddress")
                        .HasColumnType("text");

                    b.Property<string>("SMTPServerPort")
                        .HasColumnType("text");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("WebMailPassword")
                        .HasColumnType("text");

                    b.Property<string>("WebMailUserName")
                        .HasColumnType("text");

                    b.Property<string>("WebServerAddress")
                        .HasColumnType("text");

                    b.Property<string>("WebServerPort")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.TitleContent", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("integer");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<int?>("pageContentid")
                        .HasColumnType("integer");

                    b.Property<int?>("pageTitleid")
                        .HasColumnType("integer");

                    b.HasKey("ContentId", "MenuId");

                    b.HasIndex("pageContentid");

                    b.HasIndex("pageTitleid");

                    b.ToTable("titlecontents");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.UploadFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("uploadfiles");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.Category", b =>
                {
                    b.HasOne("Cms.Entities.DataContext.PageContent", "PageContent")
                        .WithOne("Category")
                        .HasForeignKey("Cms.Entities.DataContext.Category", "pagecontentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PageContent");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.ContentContainer", b =>
                {
                    b.HasOne("Cms.Entities.DataContext.PageContainer", "pageContainer")
                        .WithMany("contentContainers")
                        .HasForeignKey("pageContainerid");

                    b.HasOne("Cms.Entities.DataContext.PageContent", "pageContent")
                        .WithMany("contentcontainer")
                        .HasForeignKey("pageContentid");

                    b.Navigation("pageContainer");

                    b.Navigation("pageContent");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.TitleContent", b =>
                {
                    b.HasOne("Cms.Entities.DataContext.PageContent", "pageContent")
                        .WithMany("titleContents")
                        .HasForeignKey("pageContentid");

                    b.HasOne("Cms.Entities.DataContext.PageTitle", "pageTitle")
                        .WithMany("titleContents")
                        .HasForeignKey("pageTitleid");

                    b.Navigation("pageContent");

                    b.Navigation("pageTitle");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.PageContainer", b =>
                {
                    b.Navigation("contentContainers");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.PageContent", b =>
                {
                    b.Navigation("Category");

                    b.Navigation("contentcontainer");

                    b.Navigation("titleContents");
                });

            modelBuilder.Entity("Cms.Entities.DataContext.PageTitle", b =>
                {
                    b.Navigation("titleContents");
                });
#pragma warning restore 612, 618
        }
    }
}
